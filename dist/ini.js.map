{"version":3,"sources":["../ini.js"],"names":["os","require","parse","str","output","section","lines","split","EOL","forEach","line","replace","trim","length","match","undefined","stringify","ini","firstOccur","Object","keys","key","innerKey","substring","exports"],"mappings":"AAAA;;AACA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;;AAEA,SAASC,KAAT,CAAeC,GAAf,EAAoB;AAChB,QAAIC,SAAS,EAAb;AACA,QAAIC,UAAU,IAAd;;AAEA,QAAIC,QAAQH,IAAII,KAAJ,CAAUP,GAAGQ,GAAb,CAAZ;AACAF,UAAMG,OAAN,CAAc,UAACC,IAAD,EAAU;AACpB;AACA;AACAA,eAAOA,KAAKC,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAP;AACA,YAAID,KAAKE,IAAL,GAAYC,MAAZ,KAAsB,CAA1B,EAA8B;AAC9B;AACA,YAAIC,QAAQJ,KAAKI,KAAL,CAAW,YAAX,CAAZ;AACA,YAAIA,SAASA,MAAM,CAAN,MAAaC,SAA1B,EAAqC;AACjCV,sBAAUS,MAAM,CAAN,EAASF,IAAT,EAAV;AACAR,mBAAOC,OAAP,IAAgB,EAAhB;AACH,SAHD,MAGO;AACHS,oBAAQJ,KAAKI,KAAL,CAAW,cAAX,CAAR;AACA,gBAAIA,SAASA,MAAM,CAAN,MAAaC,SAAtB,IAAmCD,MAAM,CAAN,KAAYC,SAAnD,EAA8D;AAC1D,oBAAIV,YAAY,IAAhB,EAAsB;AAClBD,2BAAOU,MAAM,CAAN,EAASF,IAAT,EAAP,IAAwBE,MAAM,CAAN,EAASF,IAAT,GAAgBD,OAAhB,CAAwB,QAAxB,EAAkC,EAAlC,CAAxB;AACH,iBAFD,MAEO;AACHP,2BAAOC,OAAP,EAAgBS,MAAM,CAAN,EAASF,IAAT,EAAhB,IAAiCE,MAAM,CAAN,EAASF,IAAT,GAAgBD,OAAhB,CAAwB,QAAxB,EAAkC,EAAlC,CAAjC;AACH;AACJ,aAND,MAMO;AACH;AACH;AACJ;AACJ,KAtBD;AAuBA,WAAOP,MAAP;AACH;;AAED,SAASY,SAAT,CAAmBC,GAAnB,EAAwB;AACpB,QAAIb,SAAS,EAAb;AACA,QAAIc,aAAa,IAAjB;;AAEAC,WAAOC,IAAP,CAAYH,GAAZ,EAAiBR,OAAjB,CAAyB,UAACY,GAAD,EAAS;AAC9B,YAAI,OAAOJ,IAAII,GAAJ,CAAP,KAAoB,QAAxB,EAAkC;AAC9BjB,sBAAUiB,MAAM,GAAN,GAAYJ,IAAII,GAAJ,CAAZ,GAAuBrB,GAAGQ,GAApC;AACJ;AACC,SAHD,MAGO;AACH,gBAAIU,UAAJ,EAAgB;AACZA,6BAAa,KAAb;AACH,aAFD,MAEO;AACHd,0BAAUJ,GAAGQ,GAAb;AACH;AACDJ,sBAAU,MAAMiB,GAAN,GAAY,GAAZ,GAAkBrB,GAAGQ,GAA/B;AACAW,mBAAOC,IAAP,CAAYH,IAAII,GAAJ,CAAZ,EAAsBZ,OAAtB,CAA8B,UAACa,QAAD,EAAc;AACxClB,0BAAUkB,WAAW,GAAX,GAAiBL,IAAII,GAAJ,EAASC,QAAT,CAAjB,GAAsCtB,GAAGQ,GAAnD;AACH,aAFD;AAGH;AACJ,KAfD;AAgBA,WAAOJ,OAAOmB,SAAP,CAAiB,CAAjB,EAAoBnB,OAAOS,MAAP,GAAgB,CAApC,CAAP;AACH;;AAEDW,QAAQtB,KAAR,GAAgBA,KAAhB;AACAsB,QAAQR,SAAR,GAAoBA,SAApB","file":"ini.js","sourcesContent":["\"use strict\"\nconst os = require(\"os\")\n\nfunction parse(str) {\n    var output = {}\n    var section = null\n\n    var lines = str.split(os.EOL)\n    lines.forEach((line) => {\n        // skip if empty or comment line\n        // remove comment\n        line = line.replace(/;.*/, \"\")\n        if (line.trim().length ===0)  return\n        // if this line is section\n        var match = line.match(/^\\[(.*)\\]$/)\n        if (match && match[1] !== undefined) {\n            section = match[1].trim()\n            output[section]={}\n        } else {\n            match = line.match(/^(.*)\\=(.*)$/)\n            if (match && match[1] !== undefined && match[2] != undefined) {\n                if (section === null) {\n                    output[match[1].trim()]=match[2].trim().replace(/^\"|\"$/g, \"\")\n                } else {\n                    output[section][match[1].trim()]=match[2].trim().replace(/^\"|\"$/g, \"\")\n                }\n            } else {\n                return\n            }\n        }\n    })\n    return output\n}\n\nfunction stringify(ini) {\n    var output = \"\"\n    var firstOccur = true\n\n    Object.keys(ini).forEach((key) => {\n        if (typeof ini[key] === \"string\") {\n            output += key + \"=\" + ini[key] + os.EOL\n        // } else if (typeof ini[key] === \"object\") {\n        } else {\n            if (firstOccur) {\n                firstOccur = false\n            } else {\n                output += os.EOL\n            }\n            output += \"[\" + key + \"]\" + os.EOL\n            Object.keys(ini[key]).forEach((innerKey) => {\n                output += innerKey + \"=\" + ini[key][innerKey] + os.EOL\n            })\n        }\n    })\n    return output.substring(0, output.length - 1)\n}\n\nexports.parse = parse\nexports.stringify = stringify\n"]}
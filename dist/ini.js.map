{"version":3,"sources":["../ini.js"],"names":["os","require","parseSync","str","output","section","lines","split","EOL","forEach","rawLine","line","replace","trim","length","match","undefined","key","value","toLowerCase","isNaN","parse","callback","process","nextTick","stringifySync","obj","firstOccur","Object","keys","innerKey","stringify","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ;;AAEnB;;;;;AAFW,CAAX,CAOA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACvB,KAAMC,SAAS,EAAf;AACA,KAAIC,UAAU,IAAd;;AAEA,KAAMC,QAAQH,IAAII,KAAJ,CAAUP,GAAGQ,GAAb,CAAd;AACAF,OAAMG,OAAN,CAAc,UAACC,OAAD,EAAa;AAC1B;AACA;AACA,MAAMC,OAAOD,QAAQE,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAb;AACA,MAAID,KAAKE,IAAL,GAAYC,MAAZ,KAAuB,CAA3B,EAA8B;AAC9B;AACA,MAAIC,QAAQJ,KAAKI,KAAL,CAAW,WAAX,CAAZ;AACA,MAAIA,SAASA,MAAM,CAAN,MAAaC,SAA1B,EAAqC;AACpCX,aAAUU,MAAM,CAAN,EAASF,IAAT,EAAV;AACAT,UAAOC,OAAP,IAAkB,EAAlB;AACA,GAHD,MAGO;AACNU,WAAQJ,KAAKI,KAAL,CAAW,aAAX,CAAR;AACA,OAAIA,SAASA,MAAM,CAAN,MAAaC,SAAtB,IAAmCD,MAAM,CAAN,MAAaC,SAApD,EAA+D;AAC9D;AACA,QAAMC,MAAMF,MAAM,CAAN,EAASF,IAAT,EAAZ;AACA,QAAIK,QAAQH,MAAM,CAAN,EAASF,IAAT,EAAZ;AACA,QAAIK,MAAMC,WAAN,OAAwB,MAAxB,IAAkCD,MAAMC,WAAN,OAAwB,OAA9D,EAAuE;AACtED,aAAQ,CAAC,CAACA,KAAV;AACA,KAFD,MAEO,IAAI,CAACE,MAAMF,KAAN,CAAL,EAAmB;AACzB;AACAA,aAAQ,CAACA,KAAT;AACA,KAHM,MAGA;AACN;AACAA,aAAQA,MAAMN,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAAR;AACA;;AAED,QAAIP,YAAY,IAAhB,EAAsB;AACrBD,YAAOW,MAAM,CAAN,EAASF,IAAT,EAAP,IAA0BE,MAAM,CAAN,EAASF,IAAT,GAAgBD,OAAhB,CAAwB,QAAxB,EAAkC,EAAlC,CAA1B;AACAR,YAAOa,GAAP,IAAcC,KAAd;AACA,KAHD,MAGO;AACNd,YAAOC,OAAP,EAAgBY,GAAhB,IAAuBC,KAAvB;AACA;AACD;AACD;AACD,EAlCD;;AAoCA,QAAOd,MAAP;AACA;;AAED;;;;;;AAMA,SAASiB,KAAT,CAAelB,GAAf,EAAoBmB,QAApB,EAA8B;AAC7BC,SAAQC,QAAR,CAAiB,YAAM;AACtB,MAAMpB,SAASF,UAAUC,GAAV,CAAf;AACAmB,WAASlB,MAAT;AACA,EAHD;AAIA;;AAED;;;;;AAKA,SAASqB,aAAT,CAAuBC,GAAvB,EAA4B;AAC3B,KAAItB,SAAS,EAAb;AACA,KAAIuB,aAAa,IAAjB;;AAEAC,QAAOC,IAAP,CAAYH,GAAZ,EAAiBjB,OAAjB,CAAyB,UAACQ,GAAD,EAAS;AACjC,MAAI,OAAOS,IAAIT,GAAJ,CAAP,KAAoB,QAAxB,EAAkC;AACjCb,aAAaa,GAAb,SAAoBS,IAAIT,GAAJ,CAApB;AACAb,aAAUJ,GAAGQ,GAAb;AACA,GAHD,MAGO;AACN,OAAImB,UAAJ,EAAgB;AACfA,iBAAa,KAAb;AACA,IAFD,MAEO;AACNvB,cAAUJ,GAAGQ,GAAb;AACA;;AAEDJ,mBAAca,GAAd;AACAb,aAAUJ,GAAGQ,GAAb;AACAoB,UAAOC,IAAP,CAAYH,IAAIT,GAAJ,CAAZ,EAAsBR,OAAtB,CAA8B,UAACqB,QAAD,EAAc;AAC3C,QAAIZ,QAAQQ,IAAIT,GAAJ,EAASa,QAAT,CAAZ;AACA,QAAI,OAAOZ,KAAP,KAAiB,QAArB,EAA+B;AAC9B;AACA;AACA;AACA,SAAI,CAACE,MAAMF,KAAN,CAAD,IAAiBA,MAAMC,WAAN,OAAwB,MAAzC,IAAmDD,MAAMC,WAAN,OAAwB,OAA/E,EAAwF;AACvFD,qBAAYA,KAAZ;AACA;AACD;;AAEDd,cAAa0B,QAAb,SAAyBZ,KAAzB;AACAd,cAAUJ,GAAGQ,GAAb;AACA,IAbD;AAcA;AACD,EA5BD;;AA8BA,QAAOJ,MAAP;AACA;;AAED;;;;;;AAMA,SAAS2B,SAAT,CAAmBL,GAAnB,EAAwBJ,QAAxB,EAAkC;AACjCC,SAAQC,QAAR,CAAiB,YAAM;AACtB,MAAMrB,MAAMsB,cAAcC,GAAd,CAAZ;AACAJ,WAASnB,GAAT;AACA,EAHD;AAIA;;AAGD6B,QAAQX,KAAR,GAAgBA,KAAhB;AACAW,QAAQ9B,SAAR,GAAoBA,SAApB;AACA8B,QAAQD,SAAR,GAAoBA,SAApB;AACAC,QAAQP,aAAR,GAAwBA,aAAxB","file":"ini.js","sourcesContent":["const os = require(\"os\")\n\n/**\n * Parse a INI-format string to an object\n * @param {string} str INI-format string\n * @returns {Object} Object parsed from the given string\n */\nfunction parseSync(str) {\n\tconst output = {}\n\tlet section = null\n\n\tconst lines = str.split(os.EOL)\n\tlines.forEach((rawLine) => {\n\t\t// skip if empty or comment line\n\t\t// remove comment\n\t\tconst line = rawLine.replace(/;.*/, \"\")\n\t\tif (line.trim().length === 0) return\n\t\t// if this line is section\n\t\tlet match = line.match(/^\\[(.*)]$/)\n\t\tif (match && match[1] !== undefined) {\n\t\t\tsection = match[1].trim()\n\t\t\toutput[section] = {}\n\t\t} else {\n\t\t\tmatch = line.match(/^(.*)=(.*)$/)\n\t\t\tif (match && match[1] !== undefined && match[2] !== undefined) {\n\t\t\t\t// if value is a boolean value\n\t\t\t\tconst key = match[1].trim()\n\t\t\t\tlet value = match[2].trim()\n\t\t\t\tif (value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\") {\n\t\t\t\t\tvalue = !!value\n\t\t\t\t} else if (!isNaN(value)) {\n\t\t\t\t\t// if value is a number\n\t\t\t\t\tvalue = +value\n\t\t\t\t} else {\n\t\t\t\t\t// regard value as string\n\t\t\t\t\tvalue = value.replace(/^\"|\"$/g, \"\")\n\t\t\t\t}\n\n\t\t\t\tif (section === null) {\n\t\t\t\t\toutput[match[1].trim()] = match[2].trim().replace(/^\"|\"$/g, \"\")\n\t\t\t\t\toutput[key] = value\n\t\t\t\t} else {\n\t\t\t\t\toutput[section][key] = value\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\n\treturn output\n}\n\n/**\n * Async wrapper of function parseSync\n * @param {string} str INI-format string\n * @param callback Callback after parsing complete,\n *     should have one parameter: obj(the parsed object)\n */\nfunction parse(str, callback) {\n\tprocess.nextTick(() => {\n\t\tconst output = parseSync(str)\n\t\tcallback(output)\n\t})\n}\n\n/**\n * Stringify an object to an ini-format string\n * @param {Object} obj Object to be stringify\n * @returns {string} INI-format string which is stringified from given object\n */\nfunction stringifySync(obj) {\n\tlet output = \"\"\n\tlet firstOccur = true\n\n\tObject.keys(obj).forEach((key) => {\n\t\tif (typeof obj[key] === \"string\") {\n\t\t\toutput += `${key}=${obj[key]}`\n\t\t\toutput += os.EOL\n\t\t} else {\n\t\t\tif (firstOccur) {\n\t\t\t\tfirstOccur = false\n\t\t\t} else {\n\t\t\t\toutput += os.EOL\n\t\t\t}\n\n\t\t\toutput += `[${key}]`\n\t\t\toutput += os.EOL\n\t\t\tObject.keys(obj[key]).forEach((innerKey) => {\n\t\t\t\tlet value = obj[key][innerKey]\n\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t// if value can ber converted to number or boolean,\n\t\t\t\t\t// but it should be a string,\n\t\t\t\t\t// so keep the quotes to indicate its type\n\t\t\t\t\tif (!isNaN(value) || value.toLowerCase() === \"true\" || value.toLowerCase() === \"false\") {\n\t\t\t\t\t\tvalue = `\"${value}\"`\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toutput += `${innerKey}=${value}`\n\t\t\t\toutput += os.EOL\n\t\t\t})\n\t\t}\n\t})\n\n\treturn output\n}\n\n/**\n * Async wrapper of function stringifySync\n * @param {Object} obj Object to be stringify\n * @param callback Callback after parsing complete,\n *     should have one parameter: str(stringified from given object)\n */\nfunction stringify(obj, callback) {\n\tprocess.nextTick(() => {\n\t\tconst str = stringifySync(obj)\n\t\tcallback(str)\n\t})\n}\n\n\nexports.parse = parse\nexports.parseSync = parseSync\nexports.stringify = stringify\nexports.stringifySync = stringifySync\n"]}
{"version":3,"sources":["../ini.js"],"names":["os","require","parse","str","callback","process","nextTick","output","parseSync","section","lines","split","EOL","forEach","line","replace","trim","length","match","undefined","stringify","obj","stringifySync","firstOccur","Object","keys","key","innerKey","substring","exports"],"mappings":"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","file":"ini.js","sourcesContent":["\"use strict\"\nconst os = require(\"os\")\n\nfunction parse(str, callback) {\n    process.nextTick(() => {\n        var output = parseSync(str)\n        callback(output)\n    })\n}\n\nfunction parseSync(str) {\n    var output = {}\n    var section = null\n\n    var lines = str.split(os.EOL)\n    lines.forEach((line) => {\n        // skip if empty or comment line\n        // remove comment\n        line = line.replace(/;.*/, \"\")\n        if (line.trim().length ===0)  return\n        // if this line is section\n        var match = line.match(/^\\[(.*)\\]$/)\n        if (match && match[1] !== undefined) {\n            section = match[1].trim()\n            output[section]={}\n        } else {\n            match = line.match(/^(.*)\\=(.*)$/)\n            if (match && match[1] !== undefined && match[2] != undefined) {\n                if (section === null) {\n                    output[match[1].trim()]=match[2].trim().replace(/^\"|\"$/g, \"\")\n                } else {\n                    output[section][match[1].trim()]=match[2].trim().replace(/^\"|\"$/g, \"\")\n                }\n            } else {\n                return\n            }\n        }\n    })\n    return output\n}\n\nfunction stringify(obj, callback) {\n    process.nextTick(() => {\n        var str = stringifySync(obj)\n        callback(str)\n    })\n}\n\nfunction stringifySync(obj) {\n    var output = \"\"\n    var firstOccur = true\n\n    Object.keys(obj).forEach((key) => {\n        if (typeof obj[key] === \"string\") {\n            output += key + \"=\" + obj[key] + os.EOL\n        // } else if (typeof obj[key] === \"object\") {\n        } else {\n            if (firstOccur) {\n                firstOccur = false\n            } else {\n                output += os.EOL\n            }\n            output += \"[\" + key + \"]\" + os.EOL\n            Object.keys(obj[key]).forEach((innerKey) => {\n                output += innerKey + \"=\" + obj[key][innerKey] + os.EOL\n            })\n        }\n    })\n    return output.substring(0, output.length - 1)\n}\n\nexports.parse = parse\nexports.parseSync = parseSync\nexports.stringify = stringify\nexports.stringifySync = stringifySync\n"]}